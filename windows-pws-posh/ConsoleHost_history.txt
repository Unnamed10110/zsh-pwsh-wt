[31;1mSetValueInvocationException: [0m
[31;1m[36;1mLine |[0m
[31;1m[36;1m[36;1m   3 | [0m [36;1m$RawUI.CursorPosition = @{X=0;Y=0}[0m
[31;1m[36;1m[36;1m[0m[36;1m[0m[36;1m     | [31;1m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
[31;1m[36;1m[36;1m[0m[36;1m[0m[36;1m[31;1m[31;1m[36;1m     | [31;1mException setting "CursorPosition": "The handle is invalid."[0m
winget install JanDeDobbeleer.OhMyPosh -s winget
oh-my-posh font install
oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH\jandedobbeleer.omp.json"
oh-my-posh.exe init pwsh --config "$env:POSH_THEMES_PATH\jandedobbeleer.omp.json"
Set-PSReadLineOption -EditMode Vi
Set-PSReadlineOption -ViModeIndicator Script -ViModeChangeHandler {`
    Param($mode)`
    $Env:SHELL_VI_MODE = $mode`
    # go back to the beginning of the line`
    Write-Host -NoNewLine "`e[1000D"`
    # rewrite the prompt manually`
    write-Host -NoNewLine (oh-my-posh --shell pwsh --config ~/.jandedobbeleer.omp.json)`
}
oh-my-posh get shell
notepad $PROFILE
s
cls
New-Item -Path $PROFILE -Type File -Force
oh-my-posh init pwsh --config "~\AppData\Local\Programs\oh-my-posh\themes\paradox.omp.json" | Invoke-Expression
oh-my-posh init pwsh --config "~\AppData\Local\Programs\oh-my-posh\themes\jandedobbeleer.omp.json"
oh-my-posh init pwsh --config "~\AppData\Local\Programs\oh-my-posh\themes\jandedobbeleer.omp.json"cls
(@(& 'C:/Users/troja/AppData/Local/Programs/oh-my-posh/bin/oh-my-posh.exe' init pwsh --config='C:\Users\troja\AppData\Local\Programs\oh-my-posh\themes\jandedobbeleer.omp.json' --print) -join "`n") | Invoke-Expression
install-module -name terminal-icons -repository psgallery
ls
set-psreadlineoption -predictionviewstyle listview
cd f:
cd e:
c:
cd .\Desktop\
cd d:
d:
d>
cd .\repos\
mkdir c#
cd .\c#\
git clone https://github.com/Unnamed10110/WebApi_NetCore
git clone https://github.com/Unnamed10110/AppScript_Test
git clone https://github.com/Unnamed10110/Pagination_JObject_ETC
git clone https://github.com/Unnamed10110/Mongo_MFlix_API
git clone https://github.com/Unnamed10110/EdgeJobs_Test
git clone https://github.com/Unnamed10110/Utilities
mkdir python
cd .\python\
git clone https://github.com/Unnamed10110/Server_SignalRInConsole
git clone https://github.com/Unnamed10110/Python-ProjectManager
git clone https://github.com/Unnamed10110/AI
git clone https://github.com/Unnamed10110/WcfService1_SOAP
git clone https://github.com/Unnamed10110/MVCTest01
git clone https://github.com/Unnamed10110/WebApiAutores.Test
git clone 
git clone https://github.com/Unnamed10110/WorkerService_Windows_CheckURLS
git clone https://github.com/Unnamed10110/scaffolding
git clone https://github.com/Unnamed10110/GrpcService_01
git clone https://github.com/Unnamed10110/meet_in_the_middle_attack
git clone https://github.com/Unnamed10110/JwtAPI-private-
git clone https://github.com/Unnamed10110/PeliculasAPI-private-
cd .\repos\c#\
cd .\WebApi_NetCore\
git add .
git commit -m "trash"
  git config --global user.email "trojan.v6@gmail.com"
git config --global user.name "Unnamed10110"
git push origin main
cd D:\repos\java\demo00\demo00
java
echo %JAVA_HOME%
java --version
cls`
`

mvnw package
mvn --version
mvn package
cd .\target\
java -jar .\demo00-0.0.1-SNAPSHOT.jar
cd.
cd..
cs
mvn spring-boot:run
java --verison
D:\repos\java\apache-maven-3.9.6\binscf /scannow
sfc /cannow
sfc /scannow
pip install yt-dlp
C:\Users\troja\AppData\Local\Microsoft\WindowsApps\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\python.exe -m pip install --upgrade pip
yt-dlp -f 140 
yt-dlp -f 140 https://www.youtube.com/watch?v=J0uhXPaP0KE&list=PLtZeGoU2MroOIy--0g_tXf_Ige8X8rg36&index=60
yt-dlp -f 140 https://www.youtube.com/watch?v=J0uhXPaP0KE
yt-dlp
cd s
cd .\songs\040224\
python
which python
cd D:\songs\040224\
yt-dlp -f 140 https://www.youtube.com/watch?v=J0uhXPaP0KE&list=PLtZeGoU2MroOIy--0g_tXf_Ige8X8rg36&index=59
yt-dlp -f 140 https://www.youtube.com/watch?v=brwNfoEQJcQ
yt-dlp -f 140 https://www.youtube.com/watch?v=YaEBglkCFVc
yt-dlp -f 140 https://www.youtube.com/watch?v=OK7HgHRwqag
yt-dlp -f 140 https://www.youtube.com/watch?v=iDqZKVcMjZA
yt-dlp -f 140 https://www.youtube.com/watch?v=ezlpwCLgiE8
yt-dlp -f 140 https://www.youtube.com/watch?v=kLzICexlPzU
yt-dlp -f 140 https://www.youtube.com/watch?v=EGZ7g-ieh8E
yt-dlp -f 140 https://www.youtube.com/watch?v=7v00aG_r5bY
yt-dlp -f 140 https://www.youtube.com/watch?v=glgfdqI225M
yt-dlp -f 140 https://www.youtube.com/watch?v=3ZfK7od6jy4
yt-dlp -f 140 https://www.youtube.com/watch?v=Ba1fzo9g2E4
yt-dlp -f 140 https://www.youtube.com/watch?v=oGZDquSsRAU
yt-dlp -f 140 https://www.youtube.com/watch?v=Yi-nYEUW-5M
yt-dlp -f 140 https://www.youtube.com/watch?v=5alf3HvHecE
yt-dlp -f 140 https://www.youtube.com/watch?v=Hli15yqjsWk
yt-dlp -f 140 https://www.youtube.com/watch?v=H4GdT52pWUo
yt-dlp -f 140 https://www.youtube.com/watch?v=FmjrTdTydLE
del '.\Papa Roach - Leave A Light On (Talk Away The Dark) - (Official Live Music Video) `[FmjrTdTydLE`].m4a'
yt-dlp -f 140 https://www.youtube.com/watch?v=jB7i_2aaXHQ
yt-dlp -f 140 https://www.youtube.com/watch?v=M9KLVjXmfjU
yt-dlp -f 140 https://www.youtube.com/watch?v=lQKlfDv53TY
cd d
cd d;
cd D:\songs\
cd .\all\
yt-dlp --help
yt-dlp -wic -f 140 https://www.youtube.com/playlist?list=PLtZeGoU2MroNYjjdukmayJmyuEdlHOTsM
git init
git commit -m "initial commit"
git clone
git clone https://github.com/xAgustin93/blog-django-tincode.git
 python3 --version
pip install django
python.exe -m pip install --upgrade pip
python3 .\manage.py runserver
mkdir djangoRESTDemo
cd .\djangoRESTDemo\
python3 -m venv ./envs/testenv
ls .\envs\testenv\
ls .\envs\testenv\Include\
activate .\envs\testenv\Scripts\activate
source .\envs\testenv\Scripts\activate
python3 source .\envs\testenv\Scripts\activate
 .\envs\testenv\Scripts\activate.bat
 .\envs\testenv\Scripts\Activate.ps1
pip3 install django
django-admin startproject blogRest
cd .\blogRest\
django-admin --version
cd D:\repos\python\djangoRESTDemo
python .\manage.py runserver
python .\manage.py migrate
python .\manage.py createsuperuser
python.exe .\manage.py startapp posts
python3 .\manage.py startapp posts
ls .\envs\testenv\Scripts\
cd D:\repos\python\djangoRESTDemo\blogRest
D:\repos\python\djangoRESTDemo\blogRest\blogRest\envs\testenv\Scripts\Activate.ps1
pip install virtualenv
mkdir ~/BlogRest
cd blcls
mkdir ./BlogRest
cd .\BlogRest\
virtualenv testENV
.\testENV\Scripts\activate.ps1
python manage.py runserver
cd python manage.py runserver
python3 -m venv ./envs/myblog
source .\envs\myblog\Scripts\activate
.\envs\myblog\Scripts\activate.bat
.\envs\myblog\Scripts\activate.ps1
D:\repos\python\djangoRESTDemo\envs\myblog\Scripts\pip3.exe django
D:\repos\python\djangoRESTDemo\envs\myblog\Scripts\pip3.exe install django
D:\repos\python\djangoRESTDemo\envs\myblog\Scripts\python.exe .\manage.py runserver
D:\repos\python\djangoRESTDemo\envs\myblog\Scripts\python.exe .\manage.py migrate
D:\repos\python\djangoRESTDemo\envs\myblog\Scripts\python.exe .\manage.py createsuperuser
D:\repos\python\djangoRESTDemo\envs\myblog\Scripts\python.exe .\manage.py startapp posts
.\envs\myblog\Scripts\Activate.ps1
python.exe .\manage.py runserver
python3 .\manage.py makemigrations
python.exe .\manage.py migrate
taskkill /f /im explorer.exe
start explorer.exe
cd  D:\songs\all
yt-dlp -f 140 https://www.youtube.com/watch?v=zW7uIWx4dKo&list=PLtZeGoU2MroPTDYooH5Tp7fo9yJ3PY3ob&index=1&pp=gAQBiAQB8AUB
yt-dlp --h
yt-dlp -f 140 --playlist-items 1,2,3,4,5,6,7,8,9,10 https://www.youtube.com/playlist?list=PLtZeGoU2MroPTDYooH5Tp7fo9yJ3PY3ob
yt-dlp -f 140 https://www.youtube.com/watch?v=tqckS9C5PNw
yt-dlp -f 140 https://www.youtube.com/watch?v=kdiMrCMc2js
yt-dlp -f 140 https://www.youtube.com/watch?v=fGl_2MQNe68
   alias python3 p3
   alias python3
doskey p3=python3
p3
doskey p3= python3.exe
doskey p3= python3 $*
doskey p3= python3.exe $*
wsl --install
which python3
where python3
where python
where notepad
doskey p3=C:\Users\troja\AppData\Local\Microsoft\WindowsApps\python3.exe
doskey p3="C:\Users\troja\AppData\Local\Microsoft\WindowsApps\python3.exe"
doskey note = "C:\Windows\System32\notepad.exe"
note
Remove-Module PSReadLine
doskey /exename=powershell.exe g=Get-Location
g
set-alias -name=p3 -value="C:\Users\troja\AppData\Local\Microsoft\WindowsApps\python3.exe"
set-alias -Name=p3 -value="C:\Users\troja\AppData\Local\Microsoft\WindowsApps\python3.exe"
set-alias -Name p3 -value="C:\Users\troja\AppData\Local\Microsoft\WindowsApps\python3.exe"
set-alias -Name p3 -value "C:\Users\troja\AppData\Local\Microsoft\WindowsApps\python3.exe"
alias
alias main="cd d:\"
set-alias -name p3 -value python3
set-alias -name p4 -value python3
p4
remove-alias -name p4
remove-alias -name p3
alias p3='python3'
yt-dlp https://www.youtube.com/watch?v=rXPFBTLErXE&list=WL&index=4
yt-dlp https://www.youtube.com/watch?v=rXPFBTLErXE
sudo ls
yt-dl --help
yt-dlp --help find "skip"
yt-dlp -f 140 -i -c https://www.youtube.com/playlist?list=PLtZeGoU2MroPTDYooH5Tp7fo9yJ3PY3ob
cd,,
cd all
yt-dlp -f 140 https://www.youtube.com/watch?v=vldYYjCQ7jc
yt-dlp -f 140 https://www.youtube.com/watch?v=g4Sp0pjrnuU
yt-dlp -f 140 -i -c https://www.youtube.com/playlist?list=PLtZeGoU2MroNYjjdukmayJmyuEdlHOTsM
pip install yt-dlp --upgrade
yt-dlp -f 140 https://www.youtube.com/watch?v=OKpzkI08ElI
yt-dlp https://www.youtube.com/watch?v=zzHu8ngScWg
yt-dlp https://www.youtube.com/watch?v=zzHu8ngScWg&ab_channel=Frases-Simpson_Latino
pip installl ffmpeg
pip install ffmpeg
dir
dir name
cd .\songs\
yt-dlp -f 140 https://www.youtube.com/watch?v=eLJ6r8mBPJc
yt-dlp -f 140 https://www.youtube.com/watch?v=wGmDu5iDB34
yt-dlp -f 140 https://www.youtube.com/watch?v=LjF9IqvXDjY
yt-dlp -f 140 https://www.youtube.com/watch?v=jXTMgJlaDXU
pip install ffmpeg --upgrade
yt-dlp -f 140 https://www.youtube.com/watch?v=K4ZSmMHOH6o&list=PLtZeGoU2MroNYjjdukmayJmyuEdlHOTsM&index=2&pp=gAQBiAQB
yt-dlp -f 140 https://www.youtube.com/watch?v=K4ZSmMHOH6o
yt-dlp https://www.tiktok.com/@live.your.life2020/video/7406381115189103905
cd .\debian\
nmap
pip install nmap
cd D:\cybersecurity\tarea 1 - bash
cd "D:\cybersecurity\tarea 1 - bash"
sh 1.sh
cat .\1.sh
nano .\1.sh
clear
cat .\4.sh
apt-get install nano
apt get install nano
pwd
cat '.\Untitled 1_rotated.pdf'
which cls
cd .\meet_in_the_middle_attack\
cat .\bin-search.py
sh .\4.sh
wmic
winsat disk -drive C
taskkill /f /im wsl.exe
winget search kali
wintet install OffSec.KaliLinux
winget install OffSec.KaliLinux
winget install 9PKR34TNCV07
winget upgrade 9PKR34TNCV07
winget unninstall 9PKR34TNCV07
winget uninstall 9PKR34TNCV07
wsl
kali
wsl kali
bash
winsat disk -drive c
winsat disk -drive c -ran -read
winsat disk -drive d
winset disk -drive c
winget-version
winget
$profile
car $profile
cat $profile
*del /q/f/s %TEMP%\*
del /q/f/s %TEMP%\*
del /q/f/s %TEMP%\
del /q/f/s %TEMP%
del --help
del /?
del -h
man del
del -help
del --h
del /sq D:\pepe\*
del /s /q D:\pepe\*
del /s /q D:/pepe/*
del /s /q %temp%\*
rmdir /s /q %temp%\*
rmdir  %temp%\*
rmdir  %temp%\*clear
clar
del D:\pepe\tiredpepe.avi
cd D:\pepe\
cd -
..
del /f /s /q D:\pepe\*
rm /?
man rm
rm -Force -Recurse D:\pepe
rm -Force  D:\pepe
rm -Force -Confirm yes D:\pepe
rm -Force -Confirm D:\pepe
rm -help
rm --help
rm -h
Remove-Item -Path "D\pepe\*" -Recurse -Force
Remove-Item -Path "D:\pepe\*" -Recurse -Force
rm -Path "D:\pepe\*" -Recurse -Force
rm -Path "~\%temp%\*" -Recurse -Force
rm -Path "~\%TEMP%\*" -Recurse -Force
rm -Path "%TEMP%\*" -Recurse -Force
rm -Path "~\AppData\Local\Temp\%TEMP%\*" -Recurse -Force
rm -Path "~\AppData\Local\%TEMP%\*" -Recurse -Force
rm -Path "~\AppData\Local\temp\*" -Recurse -Force
echo "rm -Path "~\AppData\Local\temp\*" -Recurse -Force"
pause
Powershell.exe -File removeTemp.ps1
[enum]::GetValues([System.ConsoleColor]) | Foreach-Object {Write-Host $_ -ForegroundColor $_ }
Write-Color -color cian "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
Write-Color -text -color red cian "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
Write-Color -text -color red Blue "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
Write-Color -Text -Color red Blue "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
Write-Color -Text "This is text in Green ",`
                "followed by red ",`
                "and then we have Magenta... ",`
                "isn't it fun? ",`
                "Here goes DarkCyan" -Color Green,Red,Magenta,White,DarkCyan -StartTab 3 -LinesBefore 1 -LinesAfter 1
Write-Host "Whole text is in green" -ForegroundColor Green
Write-Host -ForegroundColor Green
 "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
Write-Host -ForegroundColor Green "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
Write-Host -ForegroundColor Green "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" LogPixels -Value 96
Write-Host -ForegroundColor Green "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" LogPixels -Value 200
Write-Host -ForegroundColor Green "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" LogPixels -Value 10
Powershell.exe -script "`
Set-PSDebug -Off`
rm -Path "~\AppData\Local\temp\*" -Recurse -Force`
Add-Type -AssemblyName System.Windows.Forms | Out-Null`
[System.Windows.Forms.MessageBox]::Show("Unused temporary files deleted!")`
echo "`n"`
Write-Host -ForegroundColor Cyan "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"`
Write-Host -ForegroundColor Green "rm -Path ~\AppData\Local\temp\* -Recurse -Force"`
Pause`
"
Powershell.exe -command "`
Powershell.exe -Command "`
powershell
exit
powershell -command ls
powershell -command "ls"
powershell -script "ls"
shell
which powershell
where powershell
echo ^<ESC^>[96m [96m"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"[0m`
Write-Host -ForegroundColor Cyan echo ^<ESC^>[96m [96m"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"[0m`
echo $0
ps -ef | grep $$ | grep -v grep
echo $SHELL
(dir 2>&1 *`|echo CMD);&<# rem #>echo PowerShell
pwsh -command "ls"
pwsh -command "Powershell.exe -script "`
""
pwsh -command "`
pwsh -command "Set-PSDebug -Off`
lcear
echo ^<ESC^>[96m [96m"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"[0m
Write-Host -ForegroundColor Cyan"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"`
[System.Windows.Forms.MessageBox]::Show("Unused temporary files deleted!"))`
alias cc="clear"
alias cc='clear'
set-alias clear cc
cc
set-alias cc clear
Set-Alias cc clear
set-alias cc cls
pwsh -command ""Set-PSDebug -Off
Add-Type -AssemblyName System.Windows.Forms | Out-Null
[System.Windows.Forms.MessageBox]::Show("Unused temporary files deleted!")
echo "`n"
Write-Host -ForegroundColor Cyan"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
Write-Host -ForegroundColor Green "rm -Path ~\AppData\Local\temp\* -Recurse -Force"
Pause
Write-Host -ForegroundColor Red "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
Write-Host -ForegroundColor Cyan "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
pwsh -command  "Set-PSDebug -Off`
pwsh -command  "pwsh -command "Set-PSDebug -Off
pwsh -command  "pwsh -command "
Set-PSDebug -Off
.\removeTempStarter.cmd
ps
powershell .\removeTempStarter.cmd
powershell -command "Set-PSDebug -Off"
pwsh .\removeTempStarter.cmd
pwsh .\removeTempStarter.pwsh
pwsh .\removeTempStarter.ps1
cd-
cd ..
find setting.json
locate setting.json
dit setting.json
dir setting.json
dir /s setting.json
dir /s c:/* setting.json
dir /s c:/* */setting.json
dir /s c:/* ~/setting.json
C:\Users\troja\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState
cd C:\Users\troja\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState
nano .\settings.json
notepad .\settings.json
pwsh -file .\removeTempStarter.ps1
pwsh -command -file .\removeTempStarter.ps1
pwsh -Command -File .\removeTempStarter.ps1
pwsh -command .\removeTempStarter.ps1
Install-Module ps2exe
ps2exe .\removeTempStarter.ps1 .\removeTempStarter.exe
ps2.exe .\removeTempStarter.ps1 .\removeTempStarter.exe
invoke-ps2exe .\removeTempStarter.ps1 .\removeTempStarter.exe
ps2exe
dir .\removeTempStarter.ps1
dir .\removeTempStarter.ps1 >> find r
dir .\removeTempStarter.ps1 | findstr remo*
dir "\example file*" /s
dir "\remove*" /s
cd .\removeTempStarter.ps1
echo %~dp0
SET var=%cd%`
ECHO %var%
SET var=cd`
ECHO var
cd
ñs
echo %cd% | clip
dir .\removeTempStarter.ps1 /s/b
dir /s/b .\removeTempStarter.ps1
dir /s /b .\removeTempStarter.ps1
dir /b .\removeTempStarter.ps1
dir .\removeTempStarter.ps1 /b
dir .\removeTempStarter.ps1 /s
dir .\removeTempStarter.ps1 /s/b | findstr "Directory:"
man findstr
findstr -h
findstr /?
dir .\removeTempStarter.ps1 /s/b | findstr "Directory:" | ~%1%!
dir .\removeTempStarter.ps1 /s/b | findstr "Directory:" ~%1%!
dir .\removeTempStarter.ps1 /s/b | findstr "Directory:" | :~%1%!
dir .\removeTempStarter.ps1 /s/b | set "ruta=findstr "Directory:"" | :~%1%!
for %F in ("pepe.txt") do @echo %~fF
for %F in ("pepe.txt") do @if exist "%~F" echo %~fF`
for %F in ("pepe.txt") do @if exist "%~F" echo %~fF
for %F in ("removeTempStarter.ps1") do @echo %~fF
cmd for %F in ("removeTempStarter.ps1") do @echo %~fF
cat .\removeTempStarter.ps1
pwd >>a.txt
pwd | findstr "D"
pwd | findstr "[A-Z]"
pwd | findstr /V "Path"
pwd | findstr /V "Path","----"
pwd | findstr /V "Path" and "----"
dir | findstr ":\"
findstr ":\"
pwd | findstr ":\\"
%temp%
\%temp%
~\%temp%
cd ~\%temp%
~\AppData\Local\temp\
cd ~\AppData\Local\temp\
ls -ñ
ls -l
rm -path "C:\Users\*\AppData\Local\Temp" -force -recurse
runas /user:admin pwsh
netuser
net user
net user Administrator
net user Administrator *
net user admin
runas /user:Unnamed10110 pwsh
runas /user:Administrator pwsh
runas /user:troja pwsh
del -path "C:\Users\*\AppData\Local\Temp" -force -recurse
delete -path "C:\Users\*\AppData\Local\Temp" -force -recurse
ls -l Takeown /F "~\AppData\Local\temp\*"
Takeown /F "~\AppData\Local\temp\*"
Takeown /F "~\AppData\Local\temp\"
Takeown /F ~\AppData\Local\temp\
"~\AppData\Local\temp\"
Takeown /F ~\AppData\Local\%temp%\
Takeown /F %temp%
Takeown /F %TEMP%
cd "~\AppData\Local\temp\"
Takeown /F f2adb7af-039c-4b0c-829c-8cfcfa17ef03.tmp /A
Takeown /F ~\AppData\Local\Temp\f2adb7af-039c-4b0c-829c-8cfcfa17ef03.tmp /A
Takeown /F .\AppData\Local\Temp\f2adb7af-039c-4b0c-829c-8cfcfa17ef03.tmp /A
Takeown /F C:\Users\troja\AppData\Local\Temp /A
Takeown /F C:\Users\*\AppData\Local\Temp /A
Takeown /F C:\Users\~\AppData\Local\Temp /A
Takeown /F C:\Users\.\AppData\Local\Temp /A
Takeown /F C:\Users\..\AppData\Local\Temp /A
Takeown -help
Takeown /help
Takeown /?
Takeown /F C:\Users\troja\AppData\Local\Temp\* /A
C:\Users\*\AppData\Local\Temp
"C:\Users\*\AppData\Local\Temp"
Takeown /F "C:\Users\*\AppData\Local\Temp" /A
cd "C:\Users\*\AppData\Local\Temp"
rm -Path "%temp%\*" -Recurse -Force
# Define the registry path for desktop settings
$regPath = "HKCU:\Control Panel\Desktop"
# Ensure the Wallpaper value points to a valid file
$wallpaperPath = "C:\Windows\Web\Wallpaper\Windows\img0.jpg" # Default Windows wallpaper
Set-ItemProperty -Path $regPath -Name Wallpaper -Value $wallpaperPath
# Set additional settings to ensure the wallpaper displays correctly
Set-ItemProperty -Path $regPath -Name WallpaperStyle -Value "10"    # 10 = Fill
Set-ItemProperty -Path $regPath -Name TileWallpaper -Value "0"     # 0 = No tiling
# Refresh the desktop to apply changes
RUNDLL32.EXE USER32.DLL,UpdatePerUserSystemParameters
# Define the registry path for desktop settings`
$regPath = "HKCU:\Control Panel\Desktop"`
# Ensure the Wallpaper value points to a valid file`
$wallpaperPath = "C:\Windows\Web\Wallpaper\Windows\img0.jpg" # Default Windows wallpaper`
Set-ItemProperty -Path $regPath -Name Wallpaper -Value $wallpaperPath`
# Set additional settings to ensure the wallpaper displays correctly`
Set-ItemProperty -Path $regPath -Name WallpaperStyle -Value "10"    # 10 = Fill`
Set-ItemProperty -Path $regPath -Name TileWallpaper -Value "0"     # 0 = No tiling`
# Refresh the desktop to apply changes`
RUNDLL32.EXE USER32.DLL,UpdatePerUserSystemParameters`
$wallpaperPath = "D:\pictures\pillars_of_creation.webp.png" # Default Windows wallpaper`
taskkill /f /im rendll32.exe
taskkill /f /im rundll32.exe
taskkill /f /im RUNDLL32.EXE
taskkill USER32.DLL
taskkill /f /im USER32.DLL
rundll32.exe
user32.dll
rundll32.exe user32.dll
rundll32.exe user32.dll #refresh desktop
# Define the registry path for desktop settings``
$regPath = "HKCU:\Control Panel\Desktop"``
``
# Ensure the Wallpaper value points to a valid file``
$wallpaperPath = "D:\pictures\pillars_of_creation.webp.png" # Default Windows wallpaper``
Set-ItemProperty -Path $regPath -Name Wallpaper -Value $wallpaperPath``
# Set additional settings to ensure the wallpaper displays correctly``
Set-ItemProperty -Path $regPath -Name WallpaperStyle -Value "10"    # 10 = Fill``
Set-ItemProperty -Path $regPath -Name TileWallpaper -Value "0"     # 0 = No tiling``
# Refresh the desktop to apply changes``
RUNDLL32.EXE USER32.DLL,UpdatePerUserSystemParameters``
taskkill /f /im wsl*
cd bas
cd bash
taskkill /f /im overlay*
taskkill /f /im pytho*
pip install win32gui
pip install pywin32
python -m pywin32_postinstall -install
python -c "import win32gui; print('pywin32 is working')"
python .\overlayPY.py
text="`
alt + 96   = \``
alt + 0180 = \'`
alt + 39   = \'`
alt + 168  = \¿`
alt + 47   = \/`
alt + 92   = \\`
alt + 173  = \¡`
alt + 179  = \│`
alt + 60   = \<`
alt + 62   = \>`
alt + 126  = \~`
alt + 0176 = \°`
alt + 39 = \'`
print(text="`
")
env
cmd & env
%path%
echo %path%
$env
$env:path
cat $env:path
nano a.txt
notepad $env:path
pathman /au
$env:Path += ';C:\foo'                # attach to the end
$env:path | findstr "python"
$env:path | findstr "py"
$env:path | findstr "Py"
$env:path | findstr "Py" -l
$env:path | findstr "Py" -w
chsh -s /bin/zsh
bash 
cd %localappdata%\Microsoft\Windows Terminal\settings.json
cd "%localappdata%\Microsoft\Windows Terminal\settings.json"
cd ".\%localappdata%\Microsoft\Windows Terminal\settings.json"
cd "..\%localappdata%\Microsoft\Windows Terminal\settings.json"
cd "~\%localappdata%\Microsoft\Windows Terminal\settings.json"
cd "~\%localappdata%\Microsoft\Windows Terminal\"
cd "%localappdata%\Microsoft\Windows Terminal\"
mkdir terminalMods
cd .\terminalMods\
cd /
Set-PSReadlineKeyHandler -Key Tab -Function Complete
Set-PSReadLineKeyHandler -Chord "Ctrl+f" -Function ForwardWord
exit`
Get-History |Get-Member -MemberType Property
ghy |ft id,endexecutiontime,commandline -auto
rmdir .\terminalMods\
set-alias py python
py
py .\overlayPY.py
winget install windhawk
Get-AppxPackage *Microsoft.WindowsTaskbar* | Remove-AppxPackage
winget chocolatey
winget install chocolatey
sudo cmd
chocolatey install sudo
choco
chocolatey
cd D:\repos\
cd .\zsh-pwsh-wt\
git add *
git commit -m "updates"
git set origin 
( find . -type d -name ".git" \`
  && find . -name ".gitignore" \
  && find . -name ".gitmodules" ) | xargs rm -rf
find . -name ".git*" -exec rm -R {} \;
find  -name ".git*" -exec rm -R {} \;
findstr . -name ".git*" -exec rm -R {} \;
where $PROFILE.txt
where $PROFILE
echo where $PROFILE
cat C:\Users\troja\Documents\PowerShell\Microsoft.PowerShell_profile.ps1
echo where pwsh
echo pwsh
eco $PROFILE
echo $profile
cmd
get-command pwsh
get-command pwsh │ .path
get-command pwsh 
get-command --help
get-command 
get-command -help
get-command -h
get-command --h
man get-command
get-command pwsh /all
get-command pwsh -all
get-command pwsh │ . PATH
get-command pwsh │ . source
 (get-command notepad.exe).Path
dir notepad.exe
 (get-command pwsh).Path
cmd -command "where pwsh"
gedit
pwsh
apt install nano
winget install nano
winget install GNU.Nano
nano
.\FreeSpace.lnk
pip install tkinter
pip install tk
pip install tk --upgrade
pip install screeninfo
pepe
echo $pepe
$pepe
$profile 
setx pepe=lavin
$env:pep="lavin"
$pep
echo $pep
$Env:pep="lavin"
cñs
hf -h
hs
cat "~\content.txt"
cat "content.txt"
py2exe
pip install py2exe
set PATH=%PATH%;D:\FreeSpace.lnk
echo $path
$path
cat $path
$PATH
echo $PATH
$env:$path
echo $env:$path
echo $env:$PATH
echo $env:path
echo $env:path notepad
notepad
freespace 
echo $env:PATH
FreeSpace.lnk
freespace
~\FreeSpace.lnk
removeTempStarter.ps1
removeTempStarter
py .\freespacepy.py
try {`
    rm -Path "~\\AppData\\Local\\temp\\*" -Recurse -Force`
    Write-Host -ForegroundColor Cyan "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" | Out-Host`
    Write-Host -ForegroundColor Green "rm -Path ~\\AppData\\Local\\temp\\* -Recurse -Force" | Out-Host`
    # Ensure console output is flushed before finishing`
    [System.Console]::Out.Flush()`
} catch {`
    Write-Host -ForegroundColor Red "An error occurred: $($_.Exception.Message)"`
    exit 1`
#Pause
CLS
pip install pyinstaller
pyinstaller --onefile .\freed.py
py .\freed.py
pyinstaller
mkdir HomeMadeFreeTemp
cd .\HomeMadeFreeTemp\
echo %freespace%
%freespace%
echo $env:%freespace%
echo $env:freespace
cat $env:freespace
Get-ChildItem $env:freespace
Get-ChildItem freespace
Get-ChildItem env:freespace
cmd echo %freespace%
gci env:
gci sys:
$env:temp
$env:freespace
new-item updateConfigsBackup.py
ccls
        zsh -command " ls -a \| grep "\.zshrc" \| xargs cp -t \/mnt\/d\/repos\/zsh-pwsh-wt\/debian\/Home & apt list --installed \| cut -d/ -f1 > \/mnt\/d\/repos\/zsh-pwsh-wt\/debian\/installed_packages.txt\"
py  .\updateConfigsBackup.py
ls -a | grep ".zshrc" | xargs cp -t /mnt/d/repos/zsh-pwsh-wt/debian/Home && apt list --installed | cut -d/ -f1 > /mnt/d/repos/zsh-pwsh-wt/debian/installed_packages.txt
zsh -command "ls -a | grep ".zshrc" | xargs cp -t /mnt/d/repos/zsh-pwsh-wt/debian/Home && apt list --installed | cut -d/ -f1 > /mnt/d/repos/zsh-pwsh-wt/debian/installed_packages.txt"
zsh
sh
winget install zsh
wsl zsh
wsl -l
wsl --unregister Ubuntu (Default)
wsl --unregister Ubuntu
cd .\repos\zsh-pwsh-wt\
py .\updateConfigsBackup.py
cd ~ && ls -a | grep ".zshrc" | xargs cp -t /mnt/d/repos/zsh-pwsh-wt/debian/Home && apt list --installed | cut -d/ -f1 > /mnt/d/repos/zsh-pwsh-wt/debian/installed_packages.txt
cd D:\repos\zsh-pwsh-wt
cd .\kaliPersonalConfig\
cd ~ && ls -a | grep ".zshrc" | xargs cp -t /mnt/d/reposzsh-pwsh-wt/kaliPersonalConfig/debian/Home && apt list --installed | cut -d/ -f1 > mnt/d/reposzsh-pwsh-wt/kaliPersonalConfig/debian/installed_packages.txt
cd D:\repos\zsh-pwsh-wt\kaliPerso*
cat .\updateConfigsBackup.py
wsl zsh -c 'cd ~ && ls -a | grep ".zshrc" | xargs cp -t /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/Home && apt list --installed | cut -d/ -f1 > /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/installed_packages.txt'
wsl zsh -c "cd ~ && ls -a | grep ".zshrc" | xargs cp -t /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/Home && apt list --installed | cut -d/ -f1 > /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/installed_packages.txt && pause"
wsl zsh -c "cd ~ && ls -a | grep ".zshrc" | xargs cp -t /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/Home && apt list --installed | cut -d/ -f1 > /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/installed_packages.txt&&echo 'Configurations from zsh UPDATED!\nPress any key to continue...'; read -k1 -s"
tratamiento de tty bash
pwsh.exe -Command "& { Set-Location -Path \"$PWD\"; .\removeTempStarter.ps1 }"
--------------------------`
$wallpaperPath = "D:\pictures\pillars_of_creation.webp.png" # Default Windows wallpaper
----------------------------`
+++++++++++++++++++++++++++++++++++++++++++`
# Set the path to the wallpaper image
$imagePath = "D:\pictures\space-travel-to-the-eagle-nebula-galaxy-free-video.jpg"
# Function to update the wallpaper for all monitors
function Set-Wallpaper {`
    param (`
        [string]$ImagePath`
    )`
    `
    # Import required .NET types for system wallpaper`
    Add-Type -TypeDefinition @"`
    using System;`
    using System.Runtime.InteropServices;`
    public class Wallpaper {`
        [DllImport("user32.dll", CharSet = CharSet.Auto)]`
        public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);`
    }`
"@`
    # SPI_SETDESKWALLPAPER = 20, SPIF_UPDATEINIFILE = 0x01, SPIF_SENDCHANGE = 0x02`
    $SPI_SETDESKWALLPAPER = 20`
    $SPIF_UPDATEINIFILE = 0x01`
    $SPIF_SENDCHANGE = 0x02`
    # Call the SystemParametersInfo API to set the wallpaper`
    [Wallpaper]::SystemParametersInfo($SPI_SETDESKWALLPAPER, 0, $ImagePath, $SPIF_UPDATEINIFILE -bor $SPIF_SENDCHANGE)`
# Set wallpaper for all screens by calling the function for each monitor
$monitors = Get-WmiObject -Class Win32_DesktopMonitor
foreach ($monitor in $monitors) {`
    Set-Wallpaper -ImagePath $imagePath`
Write-Host "Wallpaper updated for all monitors."
+++++++++++++++++++++++++++++++++++++`
.\wallpapers-update.ps1
pwsh -command .\wallpapers-update.ps1
$env:profile
echo $env:profile
%profile%
%PROFILE%
$PROFILE
copy
cd ~
pws
copy .\Documents\PowerShell\Microsoft.PowerShell_profile.ps1 
cat .\Documents\PowerShell\Microsoft.PowerShell_profile.ps1 
cat .\Documents\PowerShell\Microsoft.PowerShell_profile.ps1 D:\repos\zsh-pwsh-wt\windows-pws-posh
copy .\Documents\PowerShell\Microsoft.PowerShell_profile.ps1 D:\repos\zsh-pwsh-wt\windows-pws-posh
copy .\Documents\PowerShell\Microsoft.PowerShell_profile.ps1 D:\repos\zsh-pwsh-wt\windows-pws-posh\PROFILE.txt
pwsh.exe -Command "copy ./Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt && copy ./Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh"
cd c:
Get-Item /Documents/PowerShell/Microsoft.PowerShell_profile.ps1
Get-Item ./Documents/PowerShell/Microsoft.PowerShell_profile.ps1
Get-Item ../Documents/PowerShell/Microsoft.PowerShell_profile.ps1
Get-Item ~/Documents/PowerShell/Microsoft.PowerShell_profile.ps1
~/Documents/PowerShell/Microsoft.PowerShell_profile.ps1
notepd ~/Documents/PowerShell/Microsoft.PowerShell_profile.ps1
notepad ~/Documents/PowerShell/Microsoft.PowerShell_profile.ps1
vld
\cls
whoami
pwsh.exe -Command "cd c:/ && copy ../Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt"
pwsh.exe -Command "cd c:/ && copy c>/../Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt"
pwsh.exe -Command "cd c:/ && copy c:/../Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt"
pwsh.exe -Command "cd c:/ && copy c:/users/../Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt"
$env:username
pwsh.exe -Command "cd c:/ && copy c:/users/{$env:username}/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt"
pwsh.exe -Command "cd c:/ && copy c:/users/$($env:username)/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt"
copy c:/users/$($env:username)/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh
pwsh -Command "cd c:/ && copy c:/users/$($env:username)/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt"
         pwsh -Command "cd c:/ && copy c:/users/$($env:username)/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt && copy c:/users/$($env:username)/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh"
winget install oh-my-posh
 wsl zsh -c "cd ~ && ls -a | grep ".zshrc" | xargs cp -t /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/Home && apt list --installed | cut -d/ -f1 > /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/installed_packages.txt && sudo cp ~/zsh-pwsh-wt/kaliPersonalConfig/debian/installed_packages.txt /mnt/d/repos/zsh-pwsh-`
wt/kaliPersonalConfig/debian"
subl
wsl zsh cat '.\SHIRLEY BRITOS GB4165 8578 NW 70TH .txt'
wsl zsh -command "cat '.\SHIRLEY BRITOS GB4165 8578 NW 70TH .txt'"
wsl zsh -command "cat .\SHIRLEY BRITOS GB4165 8578 NW 70TH .txt"
wsl.exe zsh.exe -command "cat .\SHIRLEY BRITOS GB4165 8578 NW 70TH .txt"
wsl.exe zsh -command "cat .\SHIRLEY BRITOS GB4165 8578 NW 70TH .txt"
wsl.exe zsh -c "cat .\SHIRLEY BRITOS GB4165 8578 NW 70TH .txt"
wsl.exe zsh -c "cat ."SHIRLEY BRITOS GB4165 8578 NW 70TH ".txt"
wsl.exe zsh -c "cat "SHIRLEY BRITOS GB4165 8578 NW 70TH ".txt"
wsl.exe zsh -c "cat "ls""
wsl.exe zsh -c "ls"
wsl.exe zsh -c "cat SHIRLEY BRITOS GB4165 8578 NW 70TH .txt"
wsl.exe zsh -c "cat "SHIRLEY BRITOS GB4165 8578 NW 70TH .txt""
 pwsh -Command "cd c:/ && copy c:/users/$($env:username)/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt && cp && D:/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/confgSSHScriptINIT.sh /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/"
 pwsh -Command "cd c:/ && copy c:/users/$($env:username)/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt && cp && D:/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/confgZSHScriptINIT.sh /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/confgZSHScriptINIT"
 pwsh -Command "cd c:/ && copy c:/users/$($env:username)/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt && cp D:/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/confgZSHScriptINIT.sh /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/confgZSHScriptINIT"
 pwsh -Command "cd c:/ && copy c:/users/$($env:username)/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt && cp && D:/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/confgZSHScriptINIT.sh wslpath -w //wsl.localhost/kali-linux/mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/confgZSHScriptINIT"
//wsl.localhost/kali-linux/mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/
 pwsh -Command "cd c:/ && copy c:/users/$($env:username)/Documents/PowerShell/Microsoft.PowerShell_profile.ps1 D:/repos/zsh-pwsh-wt/windows-pws-posh/PROFILE.txt && copy-item D:/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/confgZSHScriptINIT.sh /mnt/d/repos/zsh-pwsh-wt/kaliPersonalConfig/debian/confgZSHScriptINIT"
cd debian
Copy-Item "D:\repos\zsh-pwsh-wt\kaliPersonalConfig\confgZSHScriptINIT.sh" /homeunnamed10110 -ToSession $s
Copy-Item "D:\repos\zsh-pwsh-wt\kaliPersonalConfig\confgZSHScriptINIT.sh" /homeunnamed10110 
Copy-Item "D:\repos\zsh-pwsh-wt\kaliPersonalConfig\confgZSHScriptINIT.sh" /home/unnamed10110 
Copy-Item "D:\repos\zsh-pwsh-wt\kaliPersonalConfig\confgZSHScriptINIT.sh" ./home/unnamed10110 
D:\fun\
set-alias py python &&set-alias cc cls
c
cd D:\fun\
yt-dlp -ss 00:00:33.00 -t 00:00:20.00 https://www.youtube.com/watch?v=6X6HqL67YmU
yt-dlp https://www.youtube.com/watch?v=6X6HqL67YmU -ss 00:00:33.00 -t 00:00:20.00 
yt-dlp --external-downloader ffmpeg --external-downloader-args ffmpeg_i:-ss 00:00:33.00 -to 00:00:53.50 https://www.youtube.com/watch?v=6X6HqL67YmU
winget install -e --id yt-dlg.yt-dlg
yt-dlp.exe --newline -i -k -o "D:\fun\%(title)s.%(ext)s" -f 38 --ignore-config --hls-prefer-native --embed-thumbnail --add-metadata "https://www.youtube.com/watch?v=6X6HqL67YmU"
yt-dlp.exe --newline -i -k -o "D:\fun\%(title)s.%(ext)s" -f mp4 --ignore-config --hls-prefer-native --embed-thumbnail --add-metadata --external-downloader ffmpeg --external-downloader-args "-ss 33 -to 53" "https://www.youtube.com/watch?v=6X6HqL67YmU"
ffmpeg
ffmpeg.exe
ffmpeg.py
winget install python
cmd -c "where python"
cd 'C:/../ffmpeg'
cd './ffmpeg'
pip show ffmpeg
cd C:\Users\troja\AppData\Local\Programs\Python\Python312\Lib\site-packages
cd .\ffmpeg\
python -c "import imageio_ffmpeg; print(imageio_ffmpeg.get_ffmpeg_exe())"
& "C:\Users\<YourUser>\AppData\Local\Programs\Python\Python<version>\Lib\site-packages\imageio_ffmpeg\binaries\ffmpeg-win64-vX.X.exe" -version
& "C:\Users\troja\AppData\Local\Programs\Python\Python<version>\Lib\site-packages\imageio_ffmpeg\binaries\ffmpeg-win64-vX.X.exe" -version
& "C:\Users\troja\AppData\Local\Programs\Python\Python312\Lib\site-packages\imageio_ffmpeg\binaries\ffmpeg-win64-vX.X.exe" -version
& "C:\Users\troja\AppData\Local\Programs\Python\Python312\Lib\site-packages\imageio_ffmpeg\binaries\ffmpeg-win64-v*" -version
& "pwsh" -version
winget install ffmpeg
cd d:fun
Get-ChildItem -Path "$env:USERPROFILE\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine" | `
Format-Table -AutoSize
winget install terminal
winget upgrade terminal
winget install lossless-cut
yt-dlp https://www.youtube.com/watch?v=6X6HqL67YmU
history 0
notepad C:\Users\troja\Documents\PowerShell\Microsoft.PowerShell_profile.ps1
$(env:username)
$($env:username)
cd ./AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLin
cd /AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLin
cd ../AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLin
cd ~/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLin
notepad $profile
(Get-PSReadlineOption).HistorySavePath
@if (@CodeSection == @Batch) @then
@CScript //nologo //E:JScript "%~F0" & goto :EOF
@end
var line, prevLine = "";
while ( ! WScript.Stdin.AtEndOfStream ) {`
   line = WScript.Stdin.ReadLine();`
   if ( line != prevLine ) {`
      WScript.Stdout.WriteLine(line);`
      prevLine = line;`
   }`
pwsh -command '@if (@CodeSection == @Batch) @then'
pwsh -command "@if (@CodeSection == @Batch) @then"
wsl.exe zsh -command 'awk -i inplace '!seen[$0]++' ConsoleHost_history.txt'
wsl.exe zsh -c 'awk -i inplace '!seen[$0]++' ConsoleHost_history.txt'
wsl.exe zsh -command "awk -i inplace \'!seen[$0]++\' filenamConsoleHost_history.txt"
wsl.exe zsh -c "awk -i inplace \'!seen[$0]++\' filenamConsoleHost_history.txt"
wsl.exe zsh -c "awk -i inplace \'!seen[\$0]++\' filenamConsoleHost_history.txt"
cd D:\repos\zsh-pwsh-wt\windows-pws-posh&& wsl zsh remove_duplicates_keeplast.zsh ConsoleHost_history.txt
(Get-Content file.txt | ForEach-Object {$_} | Reverse | Select-Object -Unique | Reverse) | Set-Content file.txt
(Get-Content file.txt | [System.Collections.ArrayList]::new() -replace {$_}).>>(Set-Content PathAlternative$HandlingtoReal}
Get-Content "yourfile.txt" | Select-Object -Unique | ForEach-Object {$_} | Set-Content "yourfile.txt"
Get-Content "C:/Users/$($env:username)/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLine/ConsoleHost_history.txt" | Select-Object -Unique | ForEach-Object {$_} | Set-Content "C:/Users/$($env:username)/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLine/ConsoleHost_history.txt"
[System.Windows.Forms.MessageBox]::Show("Command History File Cleaned!")
pwsh -command Get-Content "C:/Users/$($env:username)/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLine/ConsoleHost_history.txt" | Select-Object -Unique | ForEach-Object {$_} | Set-Content "C:/Users/$($env:username)/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLine/ConsoleHost_history.txt"
winget install AutoHotkey
winget install 9PLQFDG8HH9D
winget install UniGetUI
winget install MartiCliment.UniGetUI
winget install python --scope machine
winget install python 
winget install python --scope user
winget install ssh --scope user
winget list
ssh
Get-Command "winget" -ErrorAction SilentlyContinue | If { $_ } { winget list --source=winget | Select-Object -Skip 1 | ForEach-Object { $_.Trim() } | Set-Content -Path "C:\path\to\installed_programs.txt" } Else { Write-Output "winget not installed" }
if (Get-Command "winget" -ErrorAction SilentlyContinue) {`
    winget list --source=winget | Select-Object -Skip 1 | ForEach-Object { $_.Trim() } | Set-Content -Path "C:\path\to\installed_programs.txt"`
} else {`
    Write-Output "winget not installed"`
(if (Get-Command "winget" -ErrorAction SilentlyContinue) {`
})
if (Get-Command "winget" -ErrorAction SilentlyContinue) { winget list --source=winget | Select-Object -Skip 1 | ForEach-Object { $_.Trim() } | Set-Content -Path "C:\path\to\installed_programs.txt" } else { Write-Output "winget not installed" }
if (Get-Command "winget" -ErrorAction SilentlyContinue) { winget list --source=winget | Select-Object -Skip 1 | ForEach-Object { $_.Trim() } | Set-Content -Path "d:\\installed_programs.txt" } else { Write-Output "winget not installed" }
Get-Content -Path "C:\path\to\installed_programs.txt" | ForEach-Object { winget install --exact --id $_ }
Get-Content -Path "d:installed_programs.txt" | ForEach-Object { winget install --exact --id $_ }
winget source update
winget upgrade
Get-Content -Path "d:\installed_programs.txt" | ForEach-Object { winget install --exact --id $_ --source=winget }
    winget list --source=winget | Select-Object -Skip 1 | ForEach-Object {`
        $parts = $_ -split '\s{2,}'`
        if ($parts.Length -ge 3) { `
            $name = $parts[0]`
            $id = $parts[1]`
            "$name,$id"`
        }`
    } | Set-Content -Path "C:\path\to\installed_programs.txt"`
(if (Get-Command "winget" -ErrorAction SilentlyContinue) { winget list --source=winget | Select-Object -Skip 1 | ForEach-Object { $parts = $_ -split '\s{2,}' if ($parts.Length -ge 3) { $name = $parts[0] $id = $parts[1] "$name,$id" } } | Set-Content -Path "C:\path\to\installed_programs.txt" } else { Write-Output "winget not installed")`
    } | Set-Content -Path "d:\installed_programs.txt"`
Get-Content -Path "C:\path\to\installed_programs.txt" | ForEach-Object {`
    $parts = $_ -split ','`
    if ($parts.Length -eq 2) {`
        $id = $parts[1]`
        winget install --exact --id $id`
Get-Content -Path "C:\installed_programs.txt" | ForEach-Object {`
Get-Content -Path "d:\installed_programs.txt" | ForEach-Object {`
        if ($parts.Length -ge 3) {`
        $sources = winget search --id $id | Select-Object -Skip 1`
        if ($sources.Count -gt 0) {`
            $source = $sources[0]`
            winget install --exact --id $id --source $source`
        } else {`
            Write-Output "No sources found for $id"`
    } | Set-Content -Path "D:\installed_programs.txt"`
Get-Content -Path "D:\installed_programs.txt" | ForEach-Object {`
        winget install --exact --id $id --source winget`
pwsh .\Initial_Programs.ps1
Get-Content -Path "D:\installed_programs.txt" | ForEach-Object { $parts = $_ -split '\s{2,}' if ($parts.Length -ge 2) { $id = $parts[1] winget install --exact --id $id --source winget } }
    $parts = $_ -split '\s{2,}'`
    if ($parts.Length -ge 2) {`
Get-Content -Path "D:\installed_programs.txt" | Select-Object -Skip 1 | ForEach-Object {`
    if ($parts.Length -gt 2) {`
        try {`
            winget install --exact --id $id --source winget`
        } catch {`
            Write-Output "Failed to install $id"`
winget uninstall winrar
winget uninstall RARLab.WinRAR
winget install winrar
            $a=winget install --exact --id $id --source winget`
            echo $a`
    if ($parts.Length -gt 1) {`
        if ($id -ne '') {`
            Write-Output "Installing: $id"`
            try {`
                winget install --id $id --source winget -e -h`
            } catch {`
                Write-Output "Failed to install $id"`
            }`
            Write-Output "Trying to install: $id"`
                Write-Output "Successfully installed: $id"`
                Write-Output "Failed to install: $id"`
    Write-Output "Processing line: $_"`
    Write-Output "Split parts: $parts"`
        Write-Output "Extracted ID: $id"`
            Write-Output "ID is empty"`
    } else {`
        Write-Output "Insufficient parts"`
    Write-Output "Split parts: $($parts -join ', ')"`
        $id = $parts[1].Trim()`
$failedInstalls = @()
Get-Content -Path "D:\repos\zsh-pwsh-wt\failed_installs.txt" | Select-Object -Skip 1 | ForEach-Object {`
                $failedInstalls += "$($parts -join ',')"`
            $failedInstalls += "$($parts -join ',')"`
        $failedInstalls += "$($parts -join ',')"`
# Save failed installations to a file
$failedInstalls | Set-Content -Path "D:\repos\zsh-pwsh-wt\failed_installs.txt"
Get-Content -Path "D:\repos\zsh-pwsh-wt\installed_programs.txt" | Select-Object -Skip 1 | ForEach-Object {`
Get-Content -Path "D:\installed_programs.txt" | Select-Object -Skip 2 | ForEach-Object {`
    $parts = $_ -replace '\s{2,}', ',' -split ','`
    if ($parts.Length -ge 4) {`
                $failedInstalls += "$($_)"`
            $failedInstalls += "$($_)"`
        $failedInstalls += "$($_)"`
$failedInstalls | Set-Content -Path "D:\failed_installs.txt"
    $match = [regex]::Match($_, '^\s*(.*?)\s{2,}(.*?)\s{2,}.*?$')`
    if ($match.Success) {`
        $name = $match.Groups[1].Value.Trim()`
        $id = $match.Groups[2].Value.Trim()`
        Write-Output "Extracted Name: $name, ID: $id"`
                $failedInstalls += "$name,$id"`
            $failedInstalls += "$name,$id"`
        Write-Output "Failed to parse line: $_"`
        $failedInstalls += "$_"`
# Query installed programs from the registry
$programs = Get-ItemProperty "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*" ,`
                             "HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" |`
    Where-Object { $_.DisplayName -and $_.EstimatedSize }
# Format the output with program name and size in MB
$programs | Select-Object @{Name="Program Name"; Expression={$_.DisplayName}}, `
                        @{Name="Size (MB)"; Expression={[math]::Round($_.EstimatedSize / 1024, 2)}} |`
    Sort-Object "Program Name" |`
    Format-Table -AutoSize
# Format the output with program name and size in MB, sorted by size in descending order
    Sort-Object "Size (MB)" -Descending |`
.\CleanDisk.ps1
 cc
# Ensure the script runs as administrator
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {`
    Write-Error "Please run this script as Administrator."`
    exit`
Write-Host "Starting disk cleanup. This may take a while..." -ForegroundColor Green
# 1. Clean Temporary Files
Write-Host "Cleaning temporary files..."
Remove-Item -Path "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
Remove-Item -Path "$env:WinDir\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
# 2. Clear the Recycle Bin
Write-Host "Clearing Recycle Bin..."
$drives = Get-PSDrive -PSProvider FileSystem | Select-Object -ExpandProperty Root
foreach ($drive in $drives) {`
    $recycleBin = "$drive\$Recycle.Bin"`
    if (Test-Path $recycleBin) {`
        Get-ChildItem -Path "$recycleBin\*" -Recurse -Force -ErrorAction SilentlyContinue |`
            Remove-Item -Recurse -Force -ErrorAction SilentlyContinue`
# 3. Clean Windows Update Cache
Write-Host "Cleaning Windows Update cache..."
Stop-Service -Name wuauserv -Force -ErrorAction SilentlyContinue
Remove-Item -Path "C:\Windows\SoftwareDistribution\Download\*" -Recurse -Force -ErrorAction SilentlyContinue
Start-Service -Name wuauserv
# 4. Remove Old System Restore Points
Write-Host "Removing old system restore points..."
vssadmin delete shadows /for=c: /oldest | Out-Null
# 5. Run Disk Cleanup Tool (Silent Mode)
Write-Host "Running Disk Cleanup..."
cmd.exe /c "cleanmgr /sagerun:1"
# 6. Disable Hibernate (Optional)
#Write-Host "Disabling Hibernate..."
#powercfg -h off
# 7. Remove Unused Features
Write-Host "Removing unused Windows features..."
    Get-WindowsOptionalFeature -Online | Where-Object { $_.State -eq "Enabled" } |`
        ForEach-Object { `
            Disable-WindowsOptionalFeature -Online -FeatureName $_.FeatureName -NoRestart -ErrorAction SilentlyContinue `
    Write-Warning "Failed to access Windows Optional Features. Skipping this step."`
# 8. Clear Delivery Optimization Files
Write-Host "Clearing Delivery Optimization files..."
Remove-Item -Path "C:\Windows\SoftwareDistribution\DataStore\*" -Recurse -Force -ErrorAction SilentlyContinue
# 9. Analyze Disk Space Usage (Optional, Comment out if not needed)
Write-Host "Analyzing disk space usage for large files..."
Get-ChildItem -Path C:\ -Recurse -ErrorAction SilentlyContinue | `
    Where-Object { $_.PSIsContainer -eq $false } |`
    Sort-Object Length -Descending | `
    Select-Object FullName, @{Name="Size (MB)"; Expression={[math]::Round($_.Length / 1MB, 2)}} -First 50 |`
Write-Host "Disk cleanup completed!" -ForegroundColor Green
.\moveFiles.ps1
# Set the registry value to keep PowerShell open after script execution
Set-ItemProperty -Path "HKCU:\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" -Name ExecutionPolicy -Value "RemoteSigned"
# Set the registry value to keep CMD open after script execution
Set-ItemProperty -Path "HKCU:\Software\Microsoft\Command Processor" -Name AutoRun -Value "pause"
[# Set the registry value to keep PowerShell open after script execution`
Set-ItemProperty -Path "HKCU:\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell" -Name ExecutionPolicy -Value "RemoteSigned"]
[# Set the registry value to keep CMD open after script execution`
Set-ItemProperty -Path "HKCU:\Software\Microsoft\Command Processor" -Name AutoRun -Value "pause"]
D:\repos\zsh-pwsh-wt\
cd D:\repos\zsh-pwsh-wt\
try { .\cleandisk.ps1 } catch { Write-Error "An error occurred: $_" } finally { Read-Host "Press Enter to exit" }
Start-Process pwsh -ArgumentList "-File `./CleanDisk.ps1`" -Verb RunAs"
C:\Users\troja\AppData\Local\Microsoft\WindowsApps\pwsh.exe -command  -File "CleanDisk.ps1" -Verb RunAs
C:\Users\troja\AppData\Local\Microsoft\WindowsApps\pwsh.exe -command  -command "CleanDisk.ps1" -Verb RunAs
C:\Users\troja\AppData\Local\Microsoft\WindowsApps\pwsh.exe -command "CleanDisk.ps1" -Verb RunAs
C:\Users\troja\AppData\Local\Microsoft\WindowsApps\pwsh.exe -command "./CleanDisk.ps1" -Verb RunAs
C:\Users\troja\AppData\Local\Microsoft\WindowsApps\pwsh.exe -command "./CleanDisk.ps1" -Verb RunAs Administrator
lcs
winget install everything
winget install voidtools.Everything
winget install total commander
winget install search "total commander"
[ Write-Host "Analyzing disk space usage for large files..."]
    Get-ChildItem -Path C:\ -Recurse -ErrorAction SilentlyContinue | `
        Where-Object { $_.PSIsContainer -eq $false } |`
        Sort-Object Length -Descending | `
        Select-Object FullName, @{Name="Size (MB)"; Expression={[math]::Round($_.Length / 1MB, 2)}} -First 50 |`
        ForEach-Object {`
            # Correctly print the full file path enclosed in double quotes`
            Write-Host "`"$( $_.FullName )`""`
        }
    Write-Host "Disk cleanup completed!" -ForegroundColor Green
@' Write-Host "Analyzing disk space usage for large files..."'@
@'`
ls`
'@
`ls`
` Write-Host "Analyzing disk space usage for large files..."`
    Write-Host "Disk cleanup completed!" -ForegroundColor Green`
ollama run llama3.2
windows
ollama --help
ollama run llama32
ollama list
ollama run llama*
pip install open-webui
cd .\repos\zsh-pwsh-wt\scripts\
.\customInstallPY.py
py .\customInstallPY.py
py .\custompip.py
winget search open-webui
winget update python
.\custompip.ps1
pwsh -command .\custompip.ps1
`# Ensure pyenv is installed and initialized`
if (-not (Get-Command pyenv -ErrorAction SilentlyContinue)) {`
    git clone https://github.com/pyenv-win/pyenv-win.git $env:USERPROFILE\.pyenv`
    [System.Environment]::SetEnvironmentVariable("PATH", [System.Environment]::GetEnvironmentVariable("PATH", "User") + ";$env:USERPROFILE\.pyenv\bin;$env:USERPROFILE\.pyenv\shims", "User")`
# Ensure the PATH is updated
$env:PATH += ";$env:USERPROFILE\.pyenv\bin;$env:USERPROFILE\.pyenv\shims"
# Initialize pyenv
pyenv rehash
# Check for the required Python version
$requiredPythonVersion = "3.11.0"
if (-not (pyenv versions | Select-String $requiredPythonVersion)) {`
    pyenv install $requiredPythonVersion`
# Set the required Python version
pyenv global $requiredPythonVersion
# Install the package using the required Python version
$package = Read-Host "Enter the package name to install"
pyenv shell $requiredPythonVersion
    # Check if the package is already installed`
    pyenv exec python -m pip show $package`
    Write-Output "$package is already installed."`
    # Install the package and its dependencies`
    pyenv exec python -m pip install $package`
pip install pyenv
Invoke-WebRequest -UseBasicParsing -Uri "https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1" -OutFile "./install-pyenv-win.ps1"; &"./install-pyenv-win.ps1"
pyenv install -l
cñla
winget anythingllm
winget install anythingllm
ollama run llama2-uncensored
ollama run deepseek-coder-v2
ollama run codellama
ollama run mistral
ollama run llama3:8b
note $profile
cmd -command 'where onecommandr'
.\Set-RunAsAdmin.ps1 -ProgramPath "C:\Users\troja\AppData\Local\Microsoft\WindowsApps\onecommander.exe"
Set-RunAsAdmin.ps1 -ProgramPath "C:\Users\troja\AppData\Local\Microsoft\WindowsApps\onecommander.exe"
pwsh -command `Set-RunAsAdmin.ps1 -ProgramPath "C:\Users\troja\AppData\Local\Microsoft\WindowsApps\onecommander.exe"``
paint
mspaint
taskkill /f /im whatsap*
.\DisableAutoOpenDiveces.ps1
.\ToggleDisableAutoOpenDiveces.ps1
wt -d . ; new-tab -d C:\ pwsh.exe
wt ; new-tab -p "Command Prompt" -d C:\ ; split-pane wsl zsh
.\customWindowsTerminal.ps1
wt -d "c:/"
winget search windows terminal
winget search "windows terminal"
winget install Microsoft.WindowsTerminal
cd D:\repos\zsh-pwsh-wt\scripts
`@echo off`
wt new-tab cmd.exe ^`
    ; new-tab pwsh ^ `
    ; split-pane -H pwsh ^ `
    ; split-pane -H pwsh`
wt
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh"`
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh;split-pane -H -p 'Windows PowerShell'"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh;split-pane -H -p 'pwsh'"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh split-pane -H -p 'pwsh'"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh;split-pane -p 'pwsh'"
wt.exe new-tab cmd ; new-tab pwsh ; split-pane -V -p "pwsh"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh ; split-pane -V -p 'pwsh'"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab -p 'pwsh' ; split-pane -V -p 'pwsh'"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh ; split-pane -V -p pwsh"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab -p pwsh ; split-pane -p pwsh -V"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh ; split-pane -p pwsh -V"
wt.exe settings
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh ; split-pane --profile pwsh -V"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; split-pane --profile pwsh -V"
Start-Process "wt.exe" -ArgumentList "new-tab cmd ; new-tab pwsh ; split-pane --profile pwsh -V pwsh"
Start-Process "wt.exe" -ArgumentList "new-tab md --title "Classic CMD" ; new-tab pwsh --title "LLM"; split-pane --profile pwsh -V pwsh ; new-tab pwsh --title "Dev"; split-pane --profile pwsh -V pwsh --title "Scripting""
Start-Process "wt.exe" -ArgumentList "new-tab md --title \"Classic CMD\" ; new-tab pwsh --title \"LLM\"; split-pane --profile pwsh -V pwsh ; new-tab pwsh --title \"Dev\"; split-pane --profile pwsh -V pwsh --title \"Scripting\""
Start-Process "wt.exe" -ArgumentList "new-tab md --title ^"Classic CMD^" ; new-tab pwsh --title ^"LLM^"; split-pane --profile pwsh -V pwsh ; new-tab pwsh --title ^"Dev^"; split-pane --profile pwsh -V pwsh --title ^"Scripting^""
Start-Process "wt.exe" -ArgumentList "new-tab md --title Classic CMD"
Start-Process "wt.exe" -ArgumentList "new-tab md --title 'Classic CMD'"
Start-Process "wt.exe" -ArgumentList "new-tab cmd --title 'Classic CMD'"
Start-Process "wt.exe" -ArgumentList "new-tab md --title 'CMD' ; new-tab pwsh --title 'LLM models'; split-pane --profile pwsh -V pwsh ; new-tab pwsh --title 'Dev'; split-pane --profile pwsh -V pwsh --title 'Scripting'"
wt --help
Start-Process "wt.exe" -ArgumentList "new-tab md --title 'CMD' "
Start-Process "wt.exe" -ArgumentList "new-tab cmd --title 'CMD' "
Start-Process "wt.exe" -ArgumentList "new-tab cmd --title 'CMD' ; new-tab pwsh --title 'LLM models'; split-pane --profile pwsh -V pwsh ; new-tab pwsh --title 'Dev'; split-pane --profile pwsh -V pwsh --title 'Scripting'"
Start-Process "wt.exe" -ArgumentList "new-tab --title 'CMD' cmd  ; new-tab 'LLM models' pwsh --title ; split-pane --profile pwsh -V pwsh ; new-tab --title 'Dev' pwsh ; split-pane --title 'Scripting' --profile pwsh -V pwsh "
Start-Process "wt.exe" -ArgumentList "new-tab --title 'CMD' cmd  ; new-tab 'LLM models' pwsh ; split-pane --profile pwsh -V pwsh ; new-tab --title 'Dev' pwsh ; split-pane --title 'Scripting' --profile pwsh -V pwsh "
Start-Process "wt.exe" -ArgumentList "new-tab --title 'CMD' cmd"
Start-Process "wt.exe" -ArgumentList "new-tab --title 'CMD' cmd  ; new-tab --title 'LLM models' pwsh ; split-pane --profile pwsh -V pwsh ; new-tab --title 'Dev' pwsh ; split-pane --title 'Scripting' --profile pwsh -V pwsh "
Start-Process "wt.exe" -ArgumentList "new-tab --title 'CMD' cmd  ; new-tab --title 'LLM models' pwsh"
Start-Process "wt.exe" -ArgumentList "new-tab --title 'CMD' cmd  ; new-tab pwsh"
Start-Process "wt.exe" -ArgumentList 'new-tab cmd.exe ; new-tab pwsh'
Start-Process "wt.exe" -ArgumentList "new-tab --title 'CMD' pwsh"
Start-Process "wt.exe" -ArgumentList "new-tab cmd.exe ; new-tab pwsh"
Start-Process "wt.exe" -ArgumentList "new-tab --title 'CMD' cmd  "
Start-Process "wt.exe" -ArgumentList "new-tab --title 'CMD' cmd  ; new-tab cmd"
Start-Process wt -ArgumentList "new-tab --title 'CMD' cmd  ; new-tab cmd"
Start-Process shell:AppsFolder\Microsoft.WindowsTerminal_8wekyb3d8bbwe!App -ArgumentList "new-tab --title 'CMD' cmd  ; new-tab cmd"
Start-Process shell:AppsFolder\Microsoft.WindowsTerminal_8wekyb3d8bbwe!App -ArgumentList "new-tab --title 'CMD' cmd"
Start-Process shell:AppsFolder\Microsoft.WindowsTerminal_8wekyb3d8bbwe!App -ArgumentList "new-tab --title 'CMD' cmd; new tab cmd"
wt.exe -w code new-tab -p "GitBash" ; new-tab -p "Ubuntu" -d "/home/mark/code/project1" ; new-tab -p "Ubuntu" -d "/home/mark/code/project2" ; new-tab -p "Ubuntu" -d "/home/mark/code/project3" ; new-tab -p "GitBash"
wt.exe -ArgumentList "new-tab --title 'CMD' cmd  ; new-tab --title 'LLM models' pwsh ; split-pane --profile pwsh -V pwsh ; new-tab --title 'Dev' pwsh ; split-pane --title 'Scripting' --profile pwsh -V pwsh "
wt.exe -new-tab --title 'CMD' cmd  ; new-tab --title 'LLM models' pwsh ; split-pane --profile pwsh -V pwsh ; new-tab --title 'Dev' pwsh ; split-pane --title 'Scripting' --profile pwsh -V pwsh
wt.exe -new-tab --title 'CMD' 
wt.exe new-tab title 'CMD' 
wt.exe new-tab --title 'CMD' 
wt.exe new-tab --title 'CMD' cmd  ; new-tab --title 'LLM models' pwsh
wt.exe new-tab --title 'CMD' cmd  & new-tab --title 'LLM models' pwsh
wt.exe -w code new-tab -p "GitBash" ; new-tab -p "Ubuntu" -d "/home/mark/code/project1"
wt.exe "new-tab --title 'CMD' cmd  & new-tab --title 'LLM models' pwsh"
wt.exe new-tab cmd.exe
wt.exe new-tab cmd.exe ``
wt.exe new-tab cmd.exe `; new-tab pwsh `;
wt.exe new-tab cmd.exe `; new-tab pwsh `; split-pane -H pwsh `; new-tab pwsh `; split-pane -H pwsh
wt.exe new-tab cmd.exe `; new-tab pwsh ``
wt.exe new-tab cmd.exe `; new-tab pwsh `; split-pane -H pwsh ``
wt.exe new-tab cmd.exe `; new-tab pwsh `; split-pane -H pwsh `; new-tab pwsh ``
wt.exe new-tab cmd.exe `; new-tab pwsh `; split-pane -V -H pwsh `; new-tab pwsh `; split-pane -V -H pwsh
wt.exe new-tab cmd.exe `; new-tab pwsh `; split-pane -v -H pwsh `; new-tab pwsh `; split-pane -v -H pwsh
wt.exe new-tab cmd.exe `; new-tab pwsh `; split-pane -V pwsh `; new-tab pwsh `; split-pane -V pwsh
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab --title 'General PWSH' pwsh `; split-pane -V pwsh
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab  pwsh `; split-pane  -V --title 'General PWSH' pwsh
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab  pwsh `; split-pane  -V --title 'General PWSH' pwsh`; split-pane  -V --title 'Kali ZSH' zsh
wt.exe new-tab zsh
wt.exe new-tab wsl
wt.exe new-tab wsl zsh
new-tab --title 'Kali ZSH' wsl zsh
wt new-tab --title 'Kali ZSH' wsl zsh
wt.exe new-tab --title 'CMD' wsl
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab  pwsh `; split-pane  -V --title 'General PWSH' pwsh`; new-tab --title 'Kali ZSH' wsl
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab  pwsh `; split-pane  -V --title 'General PWSH' pwsh`; new-tab --title 'Kali ZSH' wslwt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab  pwsh `; split-pane  -V --title 'General PWSH' pwsh`; new-tab --title 'Kali ZSH' wsl zsh
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab  pwsh `; split-pane  -V --title 'General PWSH' pwsh`; new-tab --title 'Kali ZSH' wsl -command 'zsh'
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab  pwsh `; split-pane  -V --title 'General PWSH' pwsh`; new-tab --title 'Kali ZSH' wsl -c 'zsh'
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab  pwsh `; split-pane  -V --title 'General PWSH' pwsh`; new-tab --title 'Kali ZSH' 'wsl zsh'
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab  pwsh `; split-pane  -V --title 'General PWSH' pwsh`; new-tab --title 'Kali ZSH' "wsl zsh"
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh `; split-pane -V pwsh `; new-tab  pwsh `; split-pane  -V --title 'General PWSH' pwsh`; new-tab --title 'Kali ZSH' wsl -e zsh
wt.exe new-tab --title "Kali ZSH" wsl -d kali-linux
wt.exe new-tab --title "Kali ZSH" wsl -d kali-linux -e zsh
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh -command cls`; split-pane -V pwsh -command cls`; new-tab  pwsh -command cls`; split-pane  -V --title 'General PWSH' pwsh-command cls `; new-tab --title 'Kali ZSH' wsl -e zsh
wt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh -command cls`; split-pane -V pwsh -command cls`; new-tab  pwsh -command cls`; split-pane  -V --title 'General PWSH' pwsh-command cls `; new-tab --title 'Kali ZSH' wsl -e zshwt.exe new-tab --title 'CMD' cmd.exe `; new-tab --title 'LLM Models' pwsh -command "cls"`; split-pane -V pwsh -command "cls"`; new-tab  pwsh -command "cls"`; split-pane  -V --title 'General PWSH' pwsh-command cls `; new-tab --title 'Kali ZSH' wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -p pwsh pwsh -command cls`; split-pane -V -p pwsh pwsh -command cls`; new-tab -p pwsh pwsh -command cls`; split-pane  -V --title 'General PWSH' -p pwsh pwsh -command cls`; new-tab --title 'Kali ZSH' wsl -e zsh
wt new-tab --title 'LLM Models' -p pwsh [pwsh -command cls]`
wt new-tab --title 'LLM Models' -p pwsh pwsh`
wt new-tab --title 'LLM Models' -p pwsh pwsh
wt new-tab --title 'LLM Models' -p pwsh pwsh -command cls
wt new-tab --title 'LLM Models' -p pwsh [pwsh -command cls]
wt new-tab --title 'LLM Models' -p pwsh [pwsh.exe -command cls]
wt new-tab --title 'LLM Models' -p pwsh cls
wt new-tab --title 'LLM Models' pwsh cls
wt new-tab --title 'LLM Models' pwsh {cls}
wt new-tab --title 'LLM Models' pwsh {dir}
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -p pwsh {cls}`; split-pane -V -p pwsh {cls}`; new-tab -p pwsh {cls}`; split-pane  -V --title 'General PWSH' -p pwsh {cls}`; new-tab --title 'Kali ZSH' wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe 
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -p pwsh {cls}
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -p pwsh
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -P pwsh
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -Profile pwsh
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -Profile pwsh {cls}`; split-pane -V -Profile pwsh {cls}`; new-tab -Profile pwsh {cls}`; split-pane  -V --title 'General PWSH' -Profile pwsh {cls}`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -Profile pwsh {cls}
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -Profile pwsh {cls&pause}
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -Profile pwsh {pwsh -command "cls"}
wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh
cd D:\repos\zsh-pwsh-wt\windows-pws-posh
pwsh.exe -command -f customterminaltabs.ps1
pwsh.exe -command customterminaltabs.ps1
pwsh.exe -command .\CustomTerminalTabs.ps1
C:\Users\troja\AppData\Local\Microsoft\WindowsApps\pwsh.exe -command .\CustomTerminalTabs.ps1
.\CustomTerminal.lnk
.\CustomTerminal.lnk  >> a.txt
pwsh -command .\CustomTerminalTabs.ps1
pwsh -command "{wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh}"
pwsh -command {wt.exe new-tab --title 'CMD' -p cmd.exe `; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh}
.\CustomTerminalTabs.ps1
wt.exe new-tab --title 'CMD' -p cmd.exe cd`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V -Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe cd ~`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V -Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe cd ^~`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V -Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe cd \~`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V -Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe cd /`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V -Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe cd d:/repos`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V -Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe {cd d:/repos}`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V -Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe {cls}`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V -Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V --tittle 'Kali ZSH'-Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V --title 'General PWSH' -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V -Profile wsl -e zsh
wt.exe new-tab --title 'CMD' -p cmd.exe`; new-tab --title 'LLM Models' -Profile pwsh`; split-pane -V --title 'General PWSH' -Profile pwsh`; new-tab -Profile pwsh`; split-pane  -V  -Profile pwsh`; new-tab --title 'Kali ZSH'-Profile wsl -e zsh`; split-pane -V -Profile wsl -e zsh
youtube-dl https://www.youtube.com/watch?v=VDeJF8hB_54
yt-dlp https://www.youtube.com/watch?v=VDeJF8hB_54
pwsh -command 'lmgr /dli&& pause'
lmgr
slmgr.vbs /dlv
(Get-WmiObject -Query "SELECT * FROM SoftwareLicensingService").OA3xOriginalProductKey
Get-WmiObject -Query "SELECT * FROM SoftwareLicensingService" | Select-Object OA3xOriginalProductKey, LicenseStatus, Description
Get-WmiObject -Query "SELECT * FROM SoftwareLicensingService" | Select-Object OA3xOriginalProductKey, LicenseStatus, Description, @{Name='WindowsVersion';Expression={(Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion').ProductName}}
pwsh -command 'Get-WmiObject -Query "SELECT * FROM SoftwareLicensingService" | Select-Object OA3xOriginalProductKey, LicenseStatus, Description, @{Name='WindowsVersion';Expression={(Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion').ProductName}}`
&&`
pause'
.\checkLicense.ps1
pwsh -command "& {Get-WmiObject -Query 'SELECT * FROM SoftwareLicensingService' | Select-Object OA3xOriginalProductKey, LicenseStatus, Description, @{Name='WindowsVersion';Expression={(Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion').ProductName}}; pause}"
pwsh -command "& {Get-WmiObject -Query 'SELECT * FROM SoftwareLicensingService' | Select-Object OA3xOriginalProductKey, LicenseStatus, Description, @{Name='WindowsVersion';Expression={(Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion').ProductName}}&&pause}"
winget upgrade vlc
Get-WmiObject -Query 'SELECT * FROM SoftwareLicensingService'
pwsh -command "& {Get-CimInstance -Query 'SELECT * FROM SoftwareLicensingService' | Select-Object OA3xOriginalProductKey, LicenseStatus, Description, @{Name='WindowsVersion';Expression={(Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion").ProductName}}; pause}"
$host.ui.RawUI.WindowTitle = "My Custom Title"
winget uninstall whatsapp
(reg query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion" /v ProductKey).ToString() + ' - OS: ' +`
(Get-WmiObject -Query "Select * from Win32_OperatingSystem").Caption
.\checkLicense2.ps1
C:\Windows\System32\reg.exe query "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" /v ProductName |`
Out-String | Select-String -Pattern "ProductName:"
del .\checkLicense2.ps1
pwsh -command .\checkLicense2.ps1
& '.\checkLicense&HW.ps1'
.\checkLicense&HW.ps1
'.\checkLicense&HW.ps1'
.\checkLicenseANDhw.ps1
# Get the Windows licensing channel information $licenseChannel = (Get-WmiObject -Class SoftwareLicensingService).OA3xOriginalProductKey if ($licenseChannel) { Write-Output "The operating system license is OEM." } else { Write-Output "The operating system license is Retail or Volume License." }
pwsh -command '# Get the Windows licensing channel information $licenseChannel = (Get-WmiObject -Class SoftwareLicensingService).OA3xOriginalProductKey if ($licenseChannel) { Write-Output "The operating system license is OEM." } else { Write-Output "The operating system license is Retail or Volume License." }'
    # Get the Windows activation and version info
    $licenseInfo = Get-WmiObject -Query 'SELECT * FROM SoftwareLicensingService' | Select-Object OA3xOriginalProductKey, LicenseStatus, Description, @{Name='WindowsVersion';Expression={(Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion').ProductName}}
    Write-Host '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++' -ForegroundColor Green
    Write-Host 'Checking Windows License Type...' -ForegroundColor Cyan
    # Get the Windows licensing channel information
    $licenseChannel = (Get-WmiObject -Class SoftwareLicensingService).OA3xOriginalProductKey
    # Display License Type
    if ($licenseChannel) {`
        Write-Host "The operating system license is OEM." -ForegroundColor Green`
        Write-Host "The operating system license is Retail or Volume License." -ForegroundColor Yellow`
    }
    Write-Host 'Available Hardware Info:' -ForegroundColor Cyan
    # Get hardware information
    $computerInfo = Get-WmiObject -Class Win32_ComputerSystem | Select-Object Manufacturer, Model, Name, SystemType
    $biosInfo = Get-WmiObject -Class Win32_BIOS | Select-Object SerialNumber, BIOSVersion, Manufacturer, ReleaseDate
    # Get operating system information
    $osInfo = Get-WmiObject -Class Win32_OperatingSystem | Select-Object Caption, OSArchitecture, Version, LastBootUpTime
    # Get installed applications and sort by Name ascending
    $installedApps = Get-WmiObject -Class Win32_Product | Select-Object Name, Version, Vendor, InstallDate | Sort-Object Name
    # Get network adapter configuration
    $networkAdapters = Get-WmiObject -Class Win32_NetworkAdapterConfiguration | Select-Object Description, MACAddress, IPAddress
    # Get disk drives information
    $diskDrives = Get-WmiObject -Class Win32_DiskDrive | Select-Object Model, InterfaceType, MediaType, Size
    # Display the information
    Write-Output 'Windows Activation and Version Info:'
    $licenseInfo | Format-List
    Write-Output 'Computer Hardware Info:'
    $computerInfo | Format-List
    Write-Output 'BIOS Info:'
    $biosInfo | Format-List
    Write-Output 'Operating System Info:'
    $osInfo | Format-List
    Write-Output 'Installed Applications:'
    $installedApps | Format-Table -AutoSize
    Write-Output 'Network Adapter Configuration:'
    $networkAdapters | Format-List
    Write-Output 'Disk Drives Info:'
    $diskDrives | Format-Table -AutoSize
notepad 
$installedApps
echo 
echo $installedApss
echo $installedApps
$($env:installedApps)
echo $($env:installedApps)
windir disk
winget list >> ProgramListBeforeFiltering.txt
pwsh -command .\checkLicenseANDhw.ps1
wsl zsh cat $profile
wsl zsh -c 'cat $profile'
type $profile
ls -la
;s
dor
winget list | findstr 'postman*'
'aaaaaaaaaaaaaaaa' | findstr '*a*'
findstr 'postman*' winget list
lks
asll
"D:\repos\zsh-pwsh-wt\customPoshTheme.omp.json"
oh-my-posh --init --config D:\repos\zsh-pwsh-wt\customPoshTheme.omp.json | Invoke-Expression
oh-my-posh --init --config D:\repos\zsh-pwsh-wt\customPoshTheme.omp.json 
(@(& 'C:/Users/troja/AppData/Local/Programs/oh-my-posh/bin/oh-my-posh.exe' init pwsh --config='C:\Users\troja\AppData\Local\Programs\oh-my-posh\themes\half-life.omp.json' --print) -join "`n") | Invoke-Expression
Import-Module Terminal-Icons
where shell
$line = "─" * (Get-Host).UI.RawUI.WindowSize.Width Write-Host $line
{$line = "─" * (Get-Host).UI.RawUI.WindowSize.Width Write-Host $line}
.\printLines.ps1
printf '%*s\n' \"$(tput cols)\" '' | tr ' ' '─'
pwsh -comman "printf '%*s\n' \'$(tput cols)\' '' | tr ' ' '─'"
ssdf
wsh -NoProfile -Command \"'─' * [Console]::WindowWidth\"
pwsh -NoProfile -Command \"'─' * [Console]::WindowWidth\"
pwsh -NoProfile -Command "'─' * [Console]::WindowWidth\"
pwsh -NoProfile -Command "'─' * [Console]::WindowWidth"
pwsh -NoProfile -Command '\"─\" * [Console]::WindowWidth'
pwsh -command "pwsh -NoProfile -Command ''─' * [Console]::WindowWidth'"
pwsh -NoProfile -Command \"'─' * [console]::WindowWidth\"
'─' * [Console]::WindowWidth
Write-Host ('─' * [Console]::WindowWidth) -ForegroundColor Green
Get-Process
"$PWD> "
